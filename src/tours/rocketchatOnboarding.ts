import type { ISteps, ITours } from '../types';
import { createStep } from '../utils';

export default async function rocketchatOnboarding(): Promise<ITours> {
    const tourName = 'Rocket.Chat Onboarding';
    const stepsArray: ISteps[] = [
        {
            title: "Codetours extension tutorial",
            directory: ".",
            description: "## Codetours extension tutorial\n\n- To use Codetours extension in the best way possible, please turn off [comments maxheight](command:workbench.action.openSettings?%22comments.maxHeight%22)\n- Also close the primary side bar to have the maximum possible width.\n\n- To run any command, click on the command and it will run in a seperate **codetour** terminal\n- Set default nodejs version to 14 while using nvm for commands in codetours terminal for them to work correctly.(It is assumed you have already setup the project,if not set it up first)\n\n>> nvm alias default 14\n\n- To start codetour use **ctrl+shift+p** and type **start tour**\n\n- It is always advised to read the [codetours docs](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) first, to be able to use it correctly or contribute to the [codetours repository](https://github.com/Sayan4444/Rocket.Chat/tree/codetours)."
        },
        {
            title: "Interactive Tutorial to setup the project",
            description: "The officials documentation to install Rocket.Chat can be found be [link](https://developer.rocket.chat/v1/docs/server-environment-setup). This tour is an interactive guide only for **WINDOWS** user using **WSL**.[docs](https://developer.rocket.chat/v1/docs/windows-10). If you are stuck, follow this\n\nFirst of check if you are inside the WSL shell\n>> lsb_release -a\n\nshould give an output like this\n```bash\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 22.04.4 LTS\nRelease:        22.04\nCodename:       jammy\n```\nNow follow these commands\n>> sudo apt-get update && sudo apt-get dist-upgrade -y\n\n>> sudo apt-get install build-essential python3 make g++\n\nInstall node 14 using nvm by following [docs](https://github.com/nvm-sh/nvm)\n\nCheck nvm and node version\n>> command -v nvm && node -v\n\nshould give an output like this\n\n```bash\nnvm\nv14.xx.x\n```\nSet node 14 as default (very imporant for **tours scripts** to work correctly)\n>> nvm alias default 14\n\n>> curl https://install.meteor.com/ | sh\n\n>> npm install --global yarn\n\nAssuming that your are already at the root level of the directory\n\n>> yarn\n\n>> yarn dsv\n\nIf everything went well, you should see a screen like this\n\n```bash\n +-----------------------------------------------+\n |                 SERVER RUNNING                |\n +-----------------------------------------------+\n |                                               |\n |  Rocket.Chat Version: 6.7.0-develop           |\n |       NodeJS Version: 14.21.4 - x64           |\n |      MongoDB Version: 7.0.5                   |\n |       MongoDB Engine: wiredTiger              |\n |             Platform: linux                   |\n |         Process Port: 25523                   |\n |             Site URL: http://localhost:3000/  |\n |     ReplicaSet OpLog: Enabled                 |\n |          Commit Hash: 1c2f31387d              |\n |        Commit Branch: codetours_tours         |\n |                                               |\n+-----------------------------------------------+\n```\n\nNote the the values will be different but you must be able to access the Rocket.Chat server in **Site URL**"
        },
        {
            title: "Debugging Tips/Tricks",
            description: "## Here we will learn various debugging tips and tricks making your life easy as a Rocket.Chat contributor\n\n#### Lets take an example of debugging an *issue when a message is send*\n\n\n- It is a recommended to use **(going into apps/meteor and using \"yarn run debug\" )**\n\n>> cd apps/meteor &&  yarn run debug && cd ../..\n\nto run the project instead of **yarn dsv**. We will know the reason later in the guide.\n\n- We will learn how to use chrome dev tools to our advantage\n\n- Install [react-dev-tools](https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?pli=1) in your chrome browser\n\n- Since you are new to the codebase and dont know where the corresponding frontend and backend files are, lets start from first principals and try to find the component responsible for rendering the message composer.(we are trying to find all the files responsible for sending a message)"
        },
        {
            title: "Client Side Debugging 1",
            description: "- Our initial goal should be to find the react component responsible for rendering the Message Composer.\n\n- Open the [http://localhost:3000](http://localhost:3000/) -> click on any chat(say general) -> right click and select inspect\n\n- Go to Components and click here\n![image](./RC.Guided.Tours/public/onboarding/react_dev_tools_components_selector.png)\n\n\n\n- Now when you hover over any component in the browser, you can see its respective React component. However over the message composer and check the inspect tab.\n![image](./RC.Guided.Tours/public/onboarding/react_dev_tools_component_select.png)\n\n\n\nYou might ask, we wanted to debug a message bug why are we doing this. See we need to find the functions responsible for that bug, and inside a codebase of hundreds of lines you can easily be lost, so we go step by step.\n\n- Now you can see the react components rendering our message-composer, the starting point where sending messages happens.\n\n\n![image](./RC.Guided.Tours/public/onboarding/react_dev_tools_rendered_by.png)\n\nGo to [RoomBody.tsx](./apps/meteor/client/views/room/body/RoomBody.tsx)\n\nNow you have a file from where you can start.You should keep digging in either commenting out components or repeat the above steps"
        },
        {
            title: "Client Side Debugging 2",
            description: "- If you followed the above steps correctly, you should reach [here](./apps/meteor/client/views/room/composer/messageBox/MessageBox.tsx) and this will the first function responsible for sending the message \n\n```js\nconst handleSendMessage = useMutableCallback(() => {\n\t\tconst text = chat.composer?.text ?? '';\n\t\tconsole.log(text);\n\t\t....\n```\n\nNote **console.log** in client side code will be visible in the browser's inspect tab and that of server side code will be visible in the terminal where rocket.chat is running.\n\nWe use console.log to check the current value of a varaible but the problem with it is that it needs the server to reload for the changes to reflect and this takes time. So we will be using breakpoints in chrome browser, instead of console.log.\n\n- Right Click in the browser -> Inspect -> Sources -> ctrl+p and name the file which where you want to set a break point to the value which you want to see.(For this example we use **MessageBox.tsx** and set and breakpoint at **text** variable)\n\n![image](./RC.Guided.Tours/public/onboarding/handleSendMessage_breakpoint.png)\n\n\n- Now go the browser where our app is present and send a message.You will see the code execution has stopped at the line where you had set the break point.\n\nUse these buttons to navigate further code executions or you can use further breakpoints also\n\n![image](./RC.Guided.Tours/public/onboarding/breakpoint_navigation.png)\n\n- When you click on **Step over next function call**, you can see the value which was assigned to the variable **text**."
        },
        {
            title: "Server Side Debugging 1",
            description: "#### Note: Client side javascript runs directly in the browser thus it can be accessed from browser but server side javascript runs in the server and cant be accessed in the browser. \n\n- So if we need to debug server side javascript we cant use the above method, or can we! If we somehow access the server side code in the browser, we can use the above method. This can be done using the script which I have told you before. cd into apps/meteors and run the command\n\n>> yarn debug\n\nThis will push server side nodejs code into the browser. Allowing you to set breakpoints and debug it.\n\n- To see the server side code in the browser\nRight Click-> Inspect -> and click in the nodejs icon\n\n![image](./RC.Guided.Tours/public/onboarding/nodejs_in_browser.png)"

        },
        {
            title: "Server Side Debugging 2",
            description: "- Lets take an example from our previous issue of *sending a message*  and set up a break point\nin the server side codee.\n\n-By following the above steps carefully, you will easily see that [this file](./apps/meteor/app/lib/server/methods/sendMessage.ts) contains the first server-side function responsible for sending a message.\n\n```javascript\nMeteor.methods<ServerMethods>({\n\tasync sendMessage(message, previewUrls) {\n\t\tcheck(message, Object);\n```\n\n- Setup a breakpoint as shown in the image and send a message from the browser to experience the same behavior as seen before;\n\n![image](./RC.Guided.Tours/public/onboarding/value_from_breakpoint.png)"
        },
        {
            title: "VsCode Shortcuts",
            description: "#### These are some curated lists of vscode shortcuts which you should frequently use for a codebase as big as Rocket.Chat\n\n- ## Searching unique string over the codebase\n(Example- Like you remembered a component name but forgot where its implemented). You can also use regex to your advantage.\n\n![image](./RC.Guided.Tours/public/onboarding/whole_codebase_search.png)\n\n- ## Searching a file or folder by its name\n\nPress **ctrl+p** and type the \n- filename to search a file or \n- foldername and add a '/' to the end to search a folder\n\n(Example:- type **pinmessagemodal** to search for the .tsx file but **pinmessagemodal/** to search for the folder with that name)\n\n- ## Code navigation features\nRight click on any variable and you can see options such as \n\n![image](./RC.Guided.Tours/public/onboarding/codebase_navigation.png)\n\nUse these settings to your advantage.\n\n- ## Using LLM\n\nYou can use any LLM of your choice which is integrable with vscode, it makes life a lot easy specially to get answers of simple questions.\n\nNote: This is not an exhaustive guide and you must learn this and more features to have a easy time"

        },
    ]
    const steps = await Promise.all(stepsArray.map(step => createStep(step, tourName))) as ISteps[];
    return {
        $schema: 'https://aka.ms/codetour-schema',
        title: tourName,
        steps,
    };
}
